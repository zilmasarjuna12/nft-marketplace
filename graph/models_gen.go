// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"fmt"
	"io"
	"strconv"
)

type Item struct {
	ID           string    `json:"id"`
	Name         *string   `json:"name,omitempty"`
	Rating       *int      `json:"rating,omitempty"`
	Category     *Category `json:"category,omitempty"`
	Image        *string   `json:"image,omitempty"`
	Price        *int      `json:"price,omitempty"`
	Availibility *int      `json:"availibility,omitempty"`
	Reputation   *int      `json:"Reputation,omitempty"`
	Creator      *User     `json:"Creator,omitempty"`
}

type User struct {
	ID       string  `json:"id"`
	Username *string `json:"username,omitempty"`
	Email    *string `json:"email,omitempty"`
}

type Category string

const (
	CategoryPhoto     Category = "photo"
	CategorySketch    Category = "sketch"
	CategoryCartoon   Category = "cartoon"
	CategoryAnimation Category = "animation"
)

var AllCategory = []Category{
	CategoryPhoto,
	CategorySketch,
	CategoryCartoon,
	CategoryAnimation,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryPhoto, CategorySketch, CategoryCartoon, CategoryAnimation:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
